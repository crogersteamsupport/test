using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Web.UI;
using System.IO;
using System.Security.Cryptography;
using TeamSupport.Data;
using System.Web;
using System.Web.Security;
using Telerik.Web.UI;
using System.Web.UI.WebControls;
using System.Text.RegularExpressions;

namespace TeamSupport.WebUtils
{
  public class TSUtils
  {

    public static string GetAttachmentPath(string folderName, int itemID)
    {
      string root = AttachmentPath.GetRoot(UserSession.LoginUser, UserSession.LoginUser.OrganizationID);
      return Path.Combine(Path.Combine(root, folderName), itemID.ToString()) + "\\";
    }

    public static string GetAttachmentPath(string folderName, int itemID, int filePathID)
    {
      string root = AttachmentPath.GetRoot(UserSession.LoginUser, UserSession.LoginUser.OrganizationID, filePathID);
      return Path.Combine(Path.Combine(root, folderName), itemID.ToString()) + "\\";
    }

    public static void CreatePagerItem(GridItem item, int maxPageSize)
    {
      if (item is GridPagerItem)
      {
        Button ChangePageSizeLinkButton = (Button)item.FindControl("ChangePageSizeLinkButton");
        RadNumericTextBox ChangePageSizeTextBox = (RadNumericTextBox)item.FindControl("ChangePageSizeTextBox");

        string script = String.Format("var cpsi = document.getElementById('{0}'); if(cpsi.value < 1 || cpsi.value > {1} || cpsi.value == {2})return false;", item.FindControl("ChangePageSizeTextBox").ClientID, maxPageSize.ToString(), item.OwnerTableView.PageSize);

        ChangePageSizeLinkButton.Attributes["onclick"] = script;
        ChangePageSizeTextBox.MaxValue = maxPageSize;
      }


    }

    public static string ReadGridSettings(RadGrid grid)
    {
      object[] gridSettings = new object[4];

      //Save groupBy
      GridGroupByExpressionCollection groupByExpressions = grid.MasterTableView.GroupByExpressions;
      object[] groupExpressions = new object[groupByExpressions.Count];

      int count = 0;
      foreach (GridGroupByExpression expression in groupByExpressions)
      {
        groupExpressions[count] = ((IStateManager)expression).SaveViewState();
        count++;
      }

      gridSettings[0] = groupExpressions;

      //Save sort expressions
      gridSettings[1] = ((IStateManager)grid.MasterTableView.SortExpressions).SaveViewState();

      //Save columns order
      int columnsLength = grid.MasterTableView.Columns.Count +
       grid.MasterTableView.AutoGeneratedColumns.Length;

      Pair[] columnOrder = new Pair[columnsLength];

      ArrayList allColumns = new ArrayList(columnsLength);

      allColumns.AddRange(grid.MasterTableView.Columns);
      allColumns.AddRange(grid.MasterTableView.AutoGeneratedColumns);

      int i = 0;
      foreach (GridColumn column in allColumns)
      {
        Pair p = new Pair();
        p.First = column.OrderIndex;
        p.Second = column.HeaderStyle.Width;

        columnOrder[i] = p;

        i++;
      }

      gridSettings[2] = columnOrder;

      //Save filter expression
      gridSettings[3] = (object)grid.MasterTableView.FilterExpression;

      LosFormatter formatter = new LosFormatter();

      StringWriter writer = new StringWriter();
      formatter.Serialize(writer, gridSettings);

      return writer.ToString();


    }

    public static void ClearGridSettings(RadGrid grid)
    {
      grid.MasterTableView.GroupByExpressions.Clear();
      grid.MasterTableView.SortExpressions.Clear();
      grid.MasterTableView.FilterExpression = "";
    }

    public static void LoadGridSettings(RadGrid grid, string data)
    {
      if (data == null || data.Trim() == "")
      {
        ClearGridSettings(grid);
        return;
      }

      try
      {
        ClearGridSettings(grid);
        LosFormatter formatter = new LosFormatter();
        StringReader reader = new StringReader(data);

        object[] gridSettings = (object[])formatter.Deserialize(reader);

        //Load groupBy
        GridGroupByExpressionCollection groupByExpressions = grid.MasterTableView.GroupByExpressions;
        groupByExpressions.Clear();

        object[] groupExpressionsState = (object[])gridSettings[0];

        int count = 0;
        foreach (object obj in groupExpressionsState)
        {
          GridGroupByExpression expression = new GridGroupByExpression();
          ((IStateManager)expression).LoadViewState(obj);
          groupByExpressions.Add(expression);
          count++;
        }

        //Load sort expressions
        grid.MasterTableView.SortExpressions.Clear();
        ((IStateManager)grid.MasterTableView.SortExpressions).LoadViewState(gridSettings[1]);

        //Load columns order
        int columnsLength = grid.MasterTableView.Columns.Count +
         grid.MasterTableView.AutoGeneratedColumns.Length;

        Pair[] columnOrder = (Pair[])gridSettings[2];

        if (columnsLength == columnOrder.Length)
        {
          ArrayList allColumns = new ArrayList(columnsLength);

          allColumns.AddRange(grid.MasterTableView.Columns);
          allColumns.AddRange(grid.MasterTableView.AutoGeneratedColumns);

          int i = 0;
          foreach (GridColumn column in allColumns)
          {
            column.OrderIndex = (int)columnOrder[i].First;
            Unit unit = (Unit)columnOrder[i].Second;
            column.HeaderStyle.Width = unit.IsEmpty ? new Unit(200, UnitType.Pixel) : unit;
            i++;
          }
        }
        //Load filter expression
        //grid.MasterTableView.FilterExpression = (string)gridSettings[3];
      }
      catch (Exception)
      {
        ClearGridSettings(grid);

      }


    }

    public static void GetSortColumnAndDirection(ArrayList data, ref string sortColumn, ref string sortDirection)
    {
      int iterationIndex = 0;
      foreach (object secondLayer in data)
      {
        if (iterationIndex == 3)
        {
          int subIterationIndex = 0;
          foreach (object thirdLayer in (ArrayList)secondLayer)
          {
            if (subIterationIndex == 1)
            {
              sortColumn = "[" + thirdLayer.ToString().Replace("_", " ") + "]";
            }
            else if (subIterationIndex == 3)
            {
              sortDirection = thirdLayer.ToString();
            }
            subIterationIndex++;
          }
        }
        iterationIndex++;
      }
    }

    /*
    public static string ObjectToString(object o)
    {
      LosFormatter formatter = new LosFormatter();
      StringWriter writer = new StringWriter();
      formatter.Serialize(writer, o);
      return writer.ToString();
    }

    public static object StringToObject(string value)
    {
      if (value == string.Empty) return null;

      try
      {
        LosFormatter formatter = new LosFormatter();
        return formatter.Deserialize(value);
      }
      catch
      {
        return null;
      }
    }

    public static void LogException(LoginUser loginUser, Exception exception)
    {
      try
      {
        ExceptionLogs logs = new ExceptionLogs(loginUser);
        ExceptionLog log = logs.AddNewExceptionLog();


        log.Browser = HttpContext.Current.Request.Browser.Browser + HttpContext.Current.Request.Browser.Version;
        log.ExceptionName = exception.ToString();
        log.Message = exception.Message;
        log.PageInfo = "";
        log.StackTrace = exception.StackTrace;
        log.URL = "";
        logs.Save();

      }
      catch (Exception)
      {
        
      }
    }

    public static string VerifyUniqueFileName(string directory, string fileName)
    {
      string path = Path.Combine(directory, fileName);
      string result = fileName;
      int i = 0;
      while (File.Exists(path))
      {
        i++;
        if (i > 20) break;
        string name = Path.GetFileNameWithoutExtension(fileName);
        string ext = Path.GetExtension(fileName);
        result = name + " (" + i.ToString() + ")" + ext;
        path = Path.Combine(directory, result);
      }

      return result;
    }

    public static string GenerateRandomPassword()
    {
      Random random = new Random();
      string[] chars = { "abcdefgijkmnopqrstwxyz", "ABCDEFGHJKLMNPQRSTWXYZ", "123456789", "*$-+?_&=!%{}/" };
      StringBuilder builder = new StringBuilder();
      int length = random.Next(8, 12);

      for (int i = 0; i < length; i++)
      {
        string s = chars[random.Next(0, 3)];
        char c = s[random.Next(0, s.Length)];
        builder.Append(c);
      }

      return builder.ToString();
    }

    public static CreditCardType GetCreditCardType(string cardNumber)
    {
      CreditCardType ccType = CreditCardType.Invalid;
      if (cardNumber.Trim().Length < 1) return ccType;

      byte[] number = new byte[16]; // number to validate

      // Remove non-digits
      int len = 0;
      for (int i = 0; i < cardNumber.Length; i++)
      {
        if (!char.IsDigit(cardNumber, i))
        {
          return ccType;
        }
        else
        {
          if (len == 16) return ccType; // number has too many digits
          number[len++] = byte.Parse(cardNumber[i].ToString());
        }
      }

      // Use Luhn Algorithm to validate
      int sum = 0;
      for (int i = len - 1; i >= 0; i--)
      {
        if (i % 2 == len % 2)
        {
          int n = number[i] * 2;
          sum += (n / 10) + (n % 10);
        }
        else
          sum += number[i];
      }

      if (sum % 10 == 0)
      {
        switch (cardNumber.Substring(0, 1))
        {
          case "3": ccType = CreditCardType.AmericanExpress; break;
          case "4": ccType = CreditCardType.Visa; break;
          case "5": ccType = CreditCardType.MasterCard; break;
          case "6": ccType = CreditCardType.Discover; break;
          default: ccType = CreditCardType.Unknown; break;
        }
      }

      return ccType;
    }

    public static string CreditCardTypeString(CreditCardType type)
    {
      string result = "";
      switch (type)
      {
        case CreditCardType.Unknown:
          result = "Unknown";
          break;
        case CreditCardType.Invalid:
          result = "Invalid";
          break;
        case CreditCardType.Visa:
          result = "Visa";
          break;
        case CreditCardType.MasterCard:
          result = "Master Card";
          break;
        case CreditCardType.Discover:
          result = "Discover";
          break;
        case CreditCardType.AmericanExpress:
          result = "American Express";
          break;
        case CreditCardType.BetaTest:
          result = "Beta Test";
          break;
        default:
          result = "ERROR";
          break;
      }
      return result;
    }

    public static bool ResetPassword(LoginUser loginUser, User user, bool isPortalUser)
    {
      string password = GenerateRandomPassword();
      user.IsPasswordExpired = true;
      user.CryptedPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(password, "MD5");
      try
      {
        if (isPortalUser)
          EmailPosts.SendResetPortalPassword(loginUser, user.UserID, password);
        else
          EmailPosts.SendResetTSPassword(loginUser, user.UserID, password);
        user.Collection.Save();
      }
      catch(Exception ex)
      {
        return false;
      }
      return true;
    }

    public static string MinutesToDisplayTime(int minutes, string format)
    {
      bool isNeg = minutes < 0;
      string result = "0 Minutes";

      minutes = Math.Abs(minutes);

      if (minutes < 60)
      {
        result = minutes.ToString() + " Minutes";
      }
      else if (minutes < 24 * 60)
      {
        if (format == "0")
        {
          int i = minutes / 60;
          int j = minutes % 60;
          result = string.Format("{0} hours {1} minutes", i, j);
        }
        else
        {
          double d = minutes / (60.0);
          result = d.ToString(format) + " Hours";
        }
      }
      else
      {
        if (format == "0")
        {
          int m = minutes % 60;
          int h = (minutes / 60) % 24;
          int d = (minutes / 60 / 24);
          result = string.Format("{0} days {1} hours {2} minutes", d,h,m);
        }
        else
        {
          double d = minutes / (60.0 * 24.0);
          result = d.ToString(format) + " Days";
        }
      }

      if (isNeg) result = "- " + result;
      return result;
    }

    public static string MinutesToDisplayTime(int minutes)
    {
      return MinutesToDisplayTime(minutes, "0.00");
    }

    public static string StripHTMLTag(string[] tags, string text)
    {
      foreach (string tag in tags)
      {
        string theTag = tag.ToLower();
        int start = text.ToLower().IndexOf("<" + theTag);

        while (start > -1)
        {
          int end = text.ToLower().IndexOf("</" + theTag + ">");
          if (end < 0) 
            end = text.Length;
          else
            end = end + theTag.Length + 3;

          end = end - start;
          
          text = text.Remove(start, end);
          start = text.ToLower().IndexOf("<" + theTag);
        }
      }
      return text;
    }

    public static string GetMailLink(LoginUser loginUser, int userID, int ticketID)
    {
      string href = GetMailLinkHRef(loginUser, userID, ticketID);
      if (href == "") return "";

      return "<a class=\"mailLink\" href=\"" + href + "\">&nbsp</a>";
    }

    public static string GetMailLinkHRef(LoginUser loginUser, int userID, int ticketID)
    {
      User user = (User)Users.GetUser(loginUser, userID);
      Organization organization = (Organization)Organizations.GetOrganization(loginUser, loginUser.OrganizationID);
      Ticket ticket = (Ticket)Tickets.GetTicket(loginUser, ticketID);
      if (user == null || organization == null || ticket == null) return "";

      StringBuilder builder = new StringBuilder();
      builder.Append("mailto:" + user.Email);
      builder.Append("?cc=" + organization.GetReplyToAddress());
      builder.Append("&subject=" + ticket.Name + " - [" + ticket.TicketNumber + "]");
      return builder.ToString();
    
    }
    */
    /*    public static byte[] EncryptString(string data)
        {
          CspParameters parameters = new CspParameters();
          parameters.Flags = CspProviderFlags.UseDefaultKeyContainer;

          RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(parameters);
          rsa.FromXmlString("<RSAKeyValue><Modulus>h6JQhJMEn36S8Mnanh/3PC6+lXiWzeAfMHHPOynaNsM0sGSYY4aFcQouLvdQF5VDEkwt0+vWIx6UeRR08TD0WLIdMMDIJYTEANwp+J8Q2GTtXpwwmrdOVP4/m9zp8yHkITEJ42D2mRKHmyLXpwKudFhYICPzVoGPRkpvn3DtZSs=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
          return rsa.Encrypt(ASCIIEncoding.ASCII.GetBytes(data), false);
        }

        public static string DecryptString(byte[] data)
        {

          CspParameters parameters = new CspParameters();
          parameters.Flags = CspProviderFlags.UseDefaultKeyContainer;

          RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(parameters);
          rsa.FromXmlString("<RSAKeyValue><Modulus>h6JQhJMEn36S8Mnanh/3PC6+lXiWzeAfMHHPOynaNsM0sGSYY4aFcQouLvdQF5VDEkwt0+vWIx6UeRR08TD0WLIdMMDIJYTEANwp+J8Q2GTtXpwwmrdOVP4/m9zp8yHkITEJ42D2mRKHmyLXpwKudFhYICPzVoGPRkpvn3DtZSs=</Modulus><Exponent>AQAB</Exponent><P>upTZI8f0FuIcU1vBYhdziL0CelF4BiilLUfrMyHbEPxjm4KmEmz/rWQjL07Qy4TnRbyMF4S3nT0uE7J9+X5FdQ==</P><Q>uhjtFoc+Fkhcbm+K3dVBZ4s97o7mf+ud/FHivbV6T6+EtSgCejbOxqh2fMKy8N9lPHnuxzdJe+mcEVOvOiuMHw==</Q><DP>CWo3ZsnRNFJmkYJAyN1cFBtNg7SWtODaLOXDJYpgzoOd1xwJm0ZqxGoYKGv2tz5WmTtBanJk/Yc3ywCnwK4xfQ==</DP><DQ>h/hmYit2hblhL594CxUhsJHgMkleyOBSkmUSEiJit446nFIbXUhmVGgKCqYHME9JHKLKf+w5WLwbN925Dft7aQ==</DQ><InverseQ>bYWMUeCEc77rRI8VNJPGkpuJ7cldeq9FQad3JScCPwFR8SkcL7i0b5S0TSX8yHzFWTPpnVs1WMpSLj/JSxx8ng==</InverseQ><D>aJk/eQ4cGZg2X6V7iEhklTADYCgQPJLj2qtaQmkjVOozvvjFILPEQwmz1hp51MYSZJEFIpKUoJ7bp4ikKsEzHfhN7RvpONjMmU6kxk/VAdbZ47F05gacntWcTHMLZEd3QT2fkzHc609O0zEy2k9BrvkPF3KKmr4bHeqIKEagz7k=</D></RSAKeyValue>");

          return ASCIIEncoding.ASCII.GetString(rsa.Decrypt(data, false));
        }
        */
  }
}
